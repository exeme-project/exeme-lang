import "std.cf"
import "std.io"
import "std.types.{array, number}"

use array::Array
use cf::range
use number::*

; MU stands for MeasurementUnit
Geometry: trait<MU: Int|UInt|Float> = {
	area: func(Self) -> MU, ; Not defining logic, so we must define parameters later
}

; UFloat doesn't exist
Rectangle: struct<MU: UInt|Float>(Geometry) = {
	height, width: MU,
}

Square: struct<MU: UInt|Float>(Geometry) = {
	side: MU,
}

; Types are pre-defined, so only parameters have to be specified
Rectangle.area = func(self) {
	return self.height * self.width
}

Square.area = func(self) {
	return self.side ** 2
}

display_area: func<T: Geometry<MU>>(shape: T) -> MU = {
	return shape.area()
}

main: func() = {
	; Default int type is i32

	my_rectangle = Rectangle<i32> {
		height = 5,
		width = 10
	}

	my_square = Square<i32> {
		side = 5
	}

	my_shapes: Array<Geometry<i32>> = [my_rectangle, my_square]

	for range(0, my_shapes.length) => shape {
		io::out(display_area(shape))
    }
}
